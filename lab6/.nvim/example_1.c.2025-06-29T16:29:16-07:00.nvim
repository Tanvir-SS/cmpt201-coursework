#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

/*–– Assertion & Test macros ––*/
#define ASSERT(expr)                                 \
  do {                                               \
    if (!(expr)) {                                   \
      fprintf(stderr, "Assertion failed: %s\n", #expr); \
      exit(EXIT_FAILURE);                            \
    }                                                \
  } while (0)

#define TEST(expr)                                   \
  do {                                               \
    if (!(expr)) {                                   \
      fprintf(stderr, "Test failed: %s\n", #expr);   \
      exit(EXIT_FAILURE);                            \
    } else {                                         \
      printf("Test passed: %s\n", #expr);            \
    }                                                \
  } while (0)

/*–– Node & List types ––*/
typedef struct node {
  uint64_t      data;
  struct node  *next;
} node_t;

typedef struct {
  node_t *head;
} list_t;

/*–– List API ––*/
static void list_init(list_t *lst) {
  lst->head = NULL;
}

static void list_insert_sorted(list_t *lst, uint64_t value) {
  node_t *new_node = malloc(sizeof *new_node);
  ASSERT(new_node != NULL);
  new_node->data = value;
  new_node->next = NULL;

  /* pointer-to-pointer lets us handle head/tail uniformly */
  node_t **pp = &lst->head;
  while (*pp && (*pp)->data < value) {
    pp = &(*pp)->next;
  }
  new_node->next = *pp;
  *pp             = new_node;
}

static int list_index_of(const list_t *lst, uint64_t value) {
  node_t *cur = lst->head;
  int      idx = 0;
  while (cur) {
    if (cur->data == value) return idx;
    cur = cur->next;
    idx++;
  }
  return -1;
}

static void list_destroy(list_t *lst) {
  node_t *cur = lst->head;
  while (cur) {
    node_t *next = cur->next;
    free(cur);
    cur = next;
  }
  lst->head = NULL;
}

/*–– Example usage & tests ––*/
int main(void) {
  list_t lst;
  list_init(&lst);

  /* Build a sorted list from random inserts */
  list_insert_sorted(&lst, 1);
  list_insert_sorted(&lst, 2);
  list_insert_sorted(&lst, 5);
  list_insert_sorted(&lst, 3);
  TEST(list_index_of(&lst, 3) == 2);

  list_insert_sorted(&lst, 0);
  list_insert_sorted(&lst, 4);
  TEST(list_index_of(&lst, 4) == 4);

  list_destroy(&lst);
  return 0;
}
